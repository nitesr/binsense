name: Run OWLv2 Experiment
on:
    push:
        branches:
          - 'exp/**'
        paths:
          - "data/**"
          - "libs/**"
          - "params.yaml"
          - "dvc.*"
    # pull_request:
    #     branches:
    #       - "main"
    
jobs:
    deploy-runner:
        runs-on: ubuntu-latest
        environment: cloud
        permissions:
            contents: write
            id-token: write
            pull-requests: write
        steps:
            - uses: navikt/github-app-token-generator@v1
              id: get-token
              with:
                private-key: ${{ secrets.CML_GITHUB_APP_PEM }}
                app-id: ${{ secrets.CML_GITHUB_APP_ID }}

            - uses: actions/checkout@v4
              with:
                token: ${{ steps.get-token.outputs.token }}
                ref: ${{ github.event.pull_request.head.sha }}

            - uses: iterative/setup-cml@v1

            - name: Configure AWS credentials
              id: creds
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: 'us-east-1'

            - name: cml runner
              env:
                # REPO_TOKEN: ${{ steps.get-token.outputs.token }}
                REPO_TOKEN: ${{ secrets.GIT_PERSONAL_TOKEN }}
                AWS_REGION: 'us-east-1'
              run: |
                cml runner launch \
                    --cloud=aws \
                    --cloud-region=$AWS_REGION \
                    --cloud-type=g4dn.xlarge \
                    --labels=cml-gpu

    train-model:
        needs: deploy-runner
        runs-on: [self-hosted, cml-gpu]
        container:
            image: docker://iterativeai/cml:0-dvc3-base1-gpu
            options: --gpus all
        environment: cloud
        permissions:
            contents: read
            id-token: write
        steps:
            - uses: navikt/github-app-token-generator@v1
              id: get-token
              with:
                private-key: ${{ secrets.CML_GITHUB_APP_PEM }}
                app-id: ${{ secrets.CML_GITHUB_APP_ID }}

            - uses: actions/checkout@v4
              with:
                token: ${{ steps.get-token.outputs.token }}

            - uses: actions/setup-python@v2
              with:
                python-version: "3.11.8"

            - name: Configure AWS credentials
              id: creds
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: 'us-east-1'
            
            - name: cml setup
              env:
                # REPO_TOKEN: ${{ steps.get-token.outputs.token }}
                REPO_TOKEN: ${{ secrets.GIT_PERSONAL_TOKEN }}
              run: cml ci
            
            - name: dvc-repro-cml
              env:
                # REPO_TOKEN: ${{ steps.get-token.outputs.token }}
                REPO_TOKEN: ${{ secrets.GIT_PERSONAL_TOKEN }}
                TORCH_DEVICE: 'cuda'
                LT_ACCELERATOR: 'gpu'
                BINSEG_ROBOFLOW_API_KEY: ${{ secrets.BINSEG_ROBOFLOW_API_KEY }}
                AWS_DEFAULT_REGION: 'us-east-1'
                AWS_REGION: 'us-east-1'
                EXP_VER: ${{ github.event.pull_request.head.sha }}
              run: |
              
                apt-get update
                apt-get install cron
                apt-get install libgl1

                #current directory
                pwd

                # upload logs to s3
                echo "* * * * * aws s3 sync ~/binsense/_logs s3://binsense/_logs/ > ~/crontab_aws_s3_sync_logs.out 2>&1" >> mycron
                crontab mycron
                rm mycron

                # Install dependencies
                pip install -r requirements.txt
                pip install -e libs
                mkdir -p data/bin data/bin metrics/bin data/amzbin data/coco_2017  _logs/coco_2017 _logs/bin 

                dvc pull
                dvc repro
                dvc push
                cml pr --skip-ci .
        
                ### Create CML report ###

                echo "## Validating Data Prep outputs" > new_report.md
                
                echo "### data split distributions" >>  new_report.md
                echo "![inline](./data/bin/handpick_train_test_dist.png)" >>  new_report.md
                
                echo "### data split samples" >> new_report.md
                echo "![inline](./data/bin/handpick_train_test_samples.png)" >> new_report.md
                
                echo "### pre-annotation samples for annotation task" >> new_report.md
                echo "![inline](./data/bin/sample_preannotated_images.png)" >> new_report.md
                
                echo "### ground truth annotation samples after annotation" >> new_report.md
                echo "![inline](./data/bin/sample_gt_annotation_images.png)" >> new_report.md

                cml comment create new_report.md &
                echo "\n" > new_report

                echo "### downloaded dataset sanity checks after annotation" >> new_report.md
                cat ./data/bin/downloaded_data_valid_results.txt >> new_report.md

                cml comment update new_report.md &
                echo "\n" > new_report


                echo "## Validating Dataset stats" > new_report.md
                echo "### train dataset stats before training" >> new_report.md
                cat ./data/bin/train_dataset_stats.txt >> new_report.md

                cml comment create new_report.md &
                echo "\n" > new_report

                
                echo "## Metrics" > new_report.md
                echo "![inline](./metrics/bin/val_confusion_matrix)" >> new_report.md
                cat ./data/bin/train_dataset_stats.txt >> new_report.md
                cat ./data/bin/val_last_losses_metrics.txt >> new_report.md
                cml comment create new_report.md &
                echo "\n" > new_report
                
                #########################

                # echo "## Metrics" >> new_report.md
                # dvc metrics show --md >> new_report.md
                # dvc metrics diff show --md >> new_report.md

                # echo "## A few random test images" >> new_report.md
                # for file in $(ls data/test_preds/ | sort -R | tail -10); do
                #     cml asset publish data/test_preds/$file --md >> new_report.md
                # done

                #########################

