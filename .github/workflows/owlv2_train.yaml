name: Run Experiment
on:
    push:
        branches:
          - 'exp/**'
        paths:
          - "data/**"
          - "libs/**"
          - "params.yaml"
          - "dvc.*"
    pull_request:
        branches:
          - "main"
    
jobs:
    deploy-runner:
        runs-on: ubuntu-latest
        environment: cloud
        permissions:
            contents: write
            id-token: write
            pull-requests: write
        steps:
            # - uses: navikt/github-app-token-generator@v1
            #   id: get-token
            #   with:
            #     private-key: ${{ secrets.CML_GITHUB_APP_PEM }}
            #     app-id: ${{ secrets.CML_GITHUB_APP_ID }}

            - uses: actions/checkout@v4
              with:
                ref: ${{ github.event.pull_request.head.sha }}

            - uses: iterative/setup-cml@v1

            - name: Configure AWS credentials
              id: creds
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: 'us-east-1'

            - name: cml runner
              env:
                REPO_TOKEN: ${{ secrets.GITHUB_PERSONAL_TOKEN }}
                AWS_REGION: 'us-east-1'
              run: |
                cml runner \
                    --cloud=aws \
                    --cloud-region=$AWS_REGION \
                    --cloud-type=g4dn.xlarge \
                    --labels=cml-runner

    train-model:
        needs: deploy-runner
        runs-on: [self-hosted, cml-runner]
        container:
            image: iterativeai/cml:0-dvc2-base1
            options: --gpus all
        environment: cloud
        permissions:
            contents: read
            id-token: write
        steps:
            - uses: navikt/github-app-token-generator@v1
              id: get-token
              with:
                private-key: ${{ secrets.CML_GITHUB_APP_PEM }}
                app-id: ${{ secrets.CML_GITHUB_APP_ID }}

            - uses: actions/checkout@v4
            #   with:
            #     token: ${{ steps.get-token.outputs.token }}

            - uses: actions/setup-python@v2
              with:
                python-version: "3.11.8"

            - name: Configure AWS credentials
              id: creds
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: 'us-east-1'
            
            - name: cml setup
              run: cml ci
              env:
                REPO_TOKEN: ${{ secrets.GITHUB_PERSONAL_TOKEN }}
            
            - name: dvc-repro-cml
              env:
                REPO_TOKEN: ${{ secrets.GITHUB_PERSONAL_TOKEN }}
                TORCH_DEVICE: 'cuda'
                BINSEG_ROBOFLOW_API_KEY: ${{ secrets.BINSEG_ROBOFLOW_API_KEY }}
                AWS_DEFAULT_REGION: 'us-east-1'
                AWS_REGION: 'us-east-1'
              run: |
                # upload logs to s3
                crontab -l > mycron
                echo "*/5 * * * * aws s3 sync ~/binsense/_logs s3://binsense/_logs/ > ~/crontab_aws_s3_sync_logs.out 2>&1" >> mycron
                crontab mycron
                rm mycron

                # Install dependencies
                pip install -r requirements.txt
                pip install -e libs
                mkdir -p data/coco_2017 data/bin data/amzbin _logs/coco_2017 _logs/bin

                dvc pull
                dvc repro
                dvc push
                cml pr --skip-ci .
        
                ### Create CML report ###

                echo "## Validating outputs" >> report.md
                
                echo "### data split distributions" >> report.md
                cml-publish data/bin/handpick_train_test_dist.png --md >> report.md
                
                echo "### data split samples" >> report.md
                cml-publish data/bin/handpick_train_test_samples.png --md >> report.md
                
                echo "### pre-annotation samples for annotation task" >> report.md
                cml-publish data/bin/sample_preannotated_images.png --md >> report.md

                echo "### ground truth annotation samples after annotation" >> report.md
                cml-publish data/bin/sample_gt_annotation_images.png --md >> report.md

                echo "### downloaded dataset sanity checks after annotation" >> report.md
                cml-publish data/bin/downloaded_data_valid_results.txt --md >> report.md

                echo "### train dataset stats before training" >> report.md
                cml-publish  data/bin/train_dataset_stats.txt --md >> report.md
                
                #########################

                echo "## Metrics" >> report.md
                # dvc metrics show --md >> report.md
                # dvc metrics diff show --md >> report.md

                echo "## A few random test images" >> report.md
                for file in $(ls data/test_preds/ | sort -R | tail -10); do
                    cml asset publish data/test_preds/$file --md >> report.md
                done

                #########################
        
                cml comment create --target=pr --update report.md

