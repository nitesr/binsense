name: deploy-webapp
on:
    workflow_dispatch:
        inputs:
            region:
                description: 'AWS Region'
                required: true
                default: 'us-east-1'
            ec2User:
                description: 'ec2 host user'
                required: true
                default: 'ec2-user'
            publicDnsName:
                description: 'EC2 instance public host'
                required: true

jobs:
    deploy:
        runs-on: ubuntu-latest
        environment: cloud
        permissions:
            contents: read
            id-token: write
        steps:
            - uses: actions/checkout@v4

            - name: Install Nodejs
              id: install-nodejs
              uses: actions/setup-node@v4
              with:
                node-version: '20.x'
            
            - name: Install reactapp dependencies
              id: install-reactapp-dep
              run: yarn --frozen-lockfile

            - name: Configure AWS credentials
              id: creds
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ github.event.inputs.region}}
            
            - name: Configure environment name
              id: env-name
              env:
                REPO: ${{ github.repository }}
              run: |
                ENVIRONMENT=`echo $REPO | cut -d "/" -f 2`
                echo "Environment name: $ENVIRONMENT"
                echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
            
            - name: Login to ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
            
            - name: Build and Push Docker Image
              id: buil-push-dockerimage
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: binsense
                IMAGE_TAG: ${{ steps.env-name.outputs.environment }}-webapp-${{ github.sha }}
              run: |
                pwd
                yarn --cwd apps/binfinder/reactapp --frozen-lockfile
                yarn --cwd apps/binfinder/reactapp build
                docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./apps/binfinder/Dockerfile . 
                docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
            
            - name: Deploy Docker to EC2
              id: deploy-image-ec2
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: binsense
                IMAGE_TAG: ${{ steps.env-name.outputs.environment }}-webapp-${{ github.sha }}
                AWS_DEFAULT_REGION: 'us-east-1'
                AWS_REGION: 'us-east-1'
                PRIVATE_SSH_KEY: ${{ secrets.BINFINDER_ED25519_KEY }}
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                # OWL_CHKPT_S3_KEY: ${{ github.events.inputs.owl_chkpt_file }}
              uses: appleboy/ssh-action@master
              with:
                host: ${{ github.event.inputs.publicDnsName }}
                username: ${{ github.event.inputs.ec2User }}
                key: ${{ secrets.BINFINDER_ED25519_KEY }}
                envs: PRIVATE_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_DEFAULT_REGION,AWS_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
                script: |
                    sudo systemctl start docker.service
                    sudo aws --profile default configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    sudo aws --profile default configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    sudo aws --profile default configure set AWS_DEFAULT_REGION $AWS_DEFAULT_REGION
                    sudo aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY
                    # echo "{\"credHelpers\":{\"public.ecr.aws\": \"ecr-login\",\"$REGISTRY\": \"ecr-login\"}}" | sudo tee '/root/.docker/config.json' > '/dev/null'
                    
                    docker image prune -a -f
                    docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
                    
                    # download from dvc
                    [ ! -d "~/bindfinder/data/bin" ] || mkdir -p ~/binfinder/data/bin
                    dvc get https://github.com/nitesr/binsense data/bin/products.csv -o ~/binfinder/data/bin/products.csv -f
                    dvc get https://github.com/nitesr/binsense data/bin/embedded_products.csv -o ~/binfinder/data/bin/embedded_products.csv -f
                    dvc get https://github.com/nitesr/binsense data/bin/embed_store -o ~/binfinder/data/bin/embed_store -f

                    # download owl best model chkpt
                    # if [ "$OWL_CHKPT_S3_KEY" != "" ]:
                    #   mkdir -p ~/binfinder/chkpts/bin
                    #   aws s3api get-object --bucket binsense \
                    #     --key $OWL_CHKPT_S3_KEY \
                    #     ~/binfinder/chkpts/bin/owl_best_model.ckpt --output json
                    
                    docker stop binfinder || true
                    docker rm binfinder || true
                    docker run \
                      -v ~/binfinder/data:/data \
                      -v ~/binfinder/chkpts:/chkpts \
                      --name binfinder -p 80:8080 \
                      -e "PRODUCT_CSV_PATH=/data/bin/products.csv" \
                      -e "EMBEDDED_PRODUCT_CSV_PATH=/data/bin/embedded_products.csv" \
                      -e "TORCH_DEVICE=cpu" \
                      -e "USE_OWL=True" \
                      -e "USE_OWL_BASELINE=True" \
                      -e "EMBED_STORE_DIR=/data/bin/embed_store" \
                      -e "OWL_MODEL_PATH=/chkpts/bin/owl_best_model.ckpt" \
                      -e "OWL_MODEL_PARAMS_PATH=/chkpts/bin/best_model_params.yaml" \
                      -d $REGISTRY/$REPOSITORY:$IMAGE_TAG 


                
            


            
            
